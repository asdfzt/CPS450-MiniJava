/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import com.bju.cps450.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseAClassDefinition(AClassDefinition node);
    void caseAExtendsClass(AExtendsClass node);
    void caseAVariable(AVariable node);
    void caseAMethod(AMethod node);
    void caseAIntArrayType(AIntArrayType node);
    void caseAStringArrayType(AStringArrayType node);
    void caseAIntType(AIntType node);
    void caseABooleanType(ABooleanType node);
    void caseAStringType(AStringType node);
    void caseAVoidType(AVoidType node);
    void caseACustomType(ACustomType node);
    void caseAArgument(AArgument node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseAArrayAssignmentStatement(AArrayAssignmentStatement node);
    void caseAMethodCallStatement(AMethodCallStatement node);
    void caseAOrExpression(AOrExpression node);
    void caseAAndExpression(AAndExpression node);
    void caseAGreaterThanExpression(AGreaterThanExpression node);
    void caseALessThanExpression(ALessThanExpression node);
    void caseAEqualsExpression(AEqualsExpression node);
    void caseAAdditionExpression(AAdditionExpression node);
    void caseASubtractionExpression(ASubtractionExpression node);
    void caseAMultiplicationExpression(AMultiplicationExpression node);
    void caseADivisionExpression(ADivisionExpression node);
    void caseANotExpression(ANotExpression node);
    void caseANegationExpression(ANegationExpression node);
    void caseAArrayExpression(AArrayExpression node);
    void caseAMethodCallExpression(AMethodCallExpression node);
    void caseAIntExpression(AIntExpression node);
    void caseAStringExpression(AStringExpression node);
    void caseATrueExpression(ATrueExpression node);
    void caseAFalseExpression(AFalseExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseAThisExpression(AThisExpression node);
    void caseANewObjectExpression(ANewObjectExpression node);
    void caseANewIntArrayExpression(ANewIntArrayExpression node);
    void caseANewStringArrayExpression(ANewStringArrayExpression node);

    void caseTStringLiteral(TStringLiteral node);
    void caseTUnterminatedStr(TUnterminatedStr node);
    void caseTIllegalStr(TIllegalStr node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTClasskey(TClasskey node);
    void caseTPublic(TPublic node);
    void caseTVoid(TVoid node);
    void caseTStringClass(TStringClass node);
    void caseTExtends(TExtends node);
    void caseTInt(TInt node);
    void caseTBoolean(TBoolean node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTThis(TThis node);
    void caseTNew(TNew node);
    void caseTReturn(TReturn node);
    void caseTLeftCurly(TLeftCurly node);
    void caseTRightCurly(TRightCurly node);
    void caseTLeftParen(TLeftParen node);
    void caseTRightParen(TRightParen node);
    void caseTLeftBracket(TLeftBracket node);
    void caseTRightBracket(TRightBracket node);
    void caseTSemicolon(TSemicolon node);
    void caseTEquals(TEquals node);
    void caseTLessThan(TLessThan node);
    void caseTGreaterThan(TGreaterThan node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMultiplication(TMultiplication node);
    void caseTDivides(TDivides node);
    void caseTDot(TDot node);
    void caseTComma(TComma node);
    void caseTNot(TNot node);
    void caseTOr(TOr node);
    void caseTAnd(TAnd node);
    void caseTComment(TComment node);
    void caseTWhitespace(TWhitespace node);
    void caseTEndOfLine(TEndOfLine node);
    void caseTIdentifier(TIdentifier node);
    void caseTUnknownCharacter(TUnknownCharacter node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
