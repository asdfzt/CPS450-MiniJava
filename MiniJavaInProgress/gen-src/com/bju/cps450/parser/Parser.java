/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.parser;

import com.bju.cps450.lexer.*;
import com.bju.cps450.node.*;
import com.bju.cps450.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAstart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAclassdefinition1ClassDefinition */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AAclassdefinition2ClassDefinition */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AAclassdefinition3ClassDefinition */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAclassdefinition4ClassDefinition */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce AAclassdefinition5ClassDefinition */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list);
            }
            break;
            case 7: /* reduce AAclassdefinition6ClassDefinition */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list);
            }
            break;
            case 8: /* reduce AAclassdefinition7ClassDefinition */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list);
            }
            break;
            case 9: /* reduce AAclassdefinition8ClassDefinition */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list);
            }
            break;
            case 10: /* reduce AExtendsProduction */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list);
            }
            break;
            case 11: /* reduce AVariableDefinition */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list);
            }
            break;
            case 12: /* reduce AAmethoddefinition1MethodDefinition */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AAmethoddefinition2MethodDefinition */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list);
            }
            break;
            case 14: /* reduce AAmethoddefinition3MethodDefinition */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list);
            }
            break;
            case 15: /* reduce AAmethoddefinition4MethodDefinition */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list);
            }
            break;
            case 16: /* reduce AIntArrayTypeProduction */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce AStrArrayTypeProduction */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list);
            }
            break;
            case 18: /* reduce AIntTypeProduction */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list);
            }
            break;
            case 19: /* reduce ABooleanTypeProduction */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list);
            }
            break;
            case 20: /* reduce AStringTypeProduction */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list);
            }
            break;
            case 21: /* reduce AVoidTypeProduction */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list);
            }
            break;
            case 22: /* reduce ACustomTypeProduction */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list);
            }
            break;
            case 23: /* reduce AAargumentlist1ArgumentList */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list);
            }
            break;
            case 24: /* reduce AAargumentlist2ArgumentList */
            {
                ArrayList<Object> list = new24();
                push(goTo(6), list);
            }
            break;
            case 25: /* reduce AArgumentListTail */
            {
                ArrayList<Object> list = new25();
                push(goTo(7), list);
            }
            break;
            case 26: /* reduce AAvalueslist1ValuesList */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce AAvalueslist2ValuesList */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce AValuesListTail */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list);
            }
            break;
            case 29: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list);
            }
            break;
            case 30: /* reduce AWhileStatement */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list);
            }
            break;
            case 31: /* reduce AReturnStatement */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list);
            }
            break;
            case 32: /* reduce AAssignmentStatement */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list);
            }
            break;
            case 33: /* reduce AArrayAssiStatement */
            {
                ArrayList<Object> list = new33();
                push(goTo(10), list);
            }
            break;
            case 34: /* reduce AAmethodcalstatement1Statement */
            {
                ArrayList<Object> list = new34();
                push(goTo(10), list);
            }
            break;
            case 35: /* reduce AAmethodcalstatement2Statement */
            {
                ArrayList<Object> list = new35();
                push(goTo(10), list);
            }
            break;
            case 36: /* reduce AAmethodcalstatement3Statement */
            {
                ArrayList<Object> list = new36();
                push(goTo(10), list);
            }
            break;
            case 37: /* reduce AAmethodcalstatement4Statement */
            {
                ArrayList<Object> list = new37();
                push(goTo(10), list);
            }
            break;
            case 38: /* reduce AAstatementblock1StatementBlock */
            {
                ArrayList<Object> list = new38();
                push(goTo(11), list);
            }
            break;
            case 39: /* reduce AAstatementblock2StatementBlock */
            {
                ArrayList<Object> list = new39();
                push(goTo(11), list);
            }
            break;
            case 40: /* reduce AObjectCall */
            {
                ArrayList<Object> list = new40();
                push(goTo(12), list);
            }
            break;
            case 41: /* reduce AExpression */
            {
                ArrayList<Object> list = new41();
                push(goTo(13), list);
            }
            break;
            case 42: /* reduce AOrExpressionLvl6 */
            {
                ArrayList<Object> list = new42();
                push(goTo(14), list);
            }
            break;
            case 43: /* reduce APassExpressionLvl6 */
            {
                ArrayList<Object> list = new43();
                push(goTo(14), list);
            }
            break;
            case 44: /* reduce AAndExpressionLvl5 */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list);
            }
            break;
            case 45: /* reduce APassExpressionLvl5 */
            {
                ArrayList<Object> list = new45();
                push(goTo(15), list);
            }
            break;
            case 46: /* reduce AQtExpressionLvl4 */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce ALtExpressionLvl4 */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list);
            }
            break;
            case 48: /* reduce AEqExpressionLvl4 */
            {
                ArrayList<Object> list = new48();
                push(goTo(16), list);
            }
            break;
            case 49: /* reduce APassExpressionLvl4 */
            {
                ArrayList<Object> list = new49();
                push(goTo(16), list);
            }
            break;
            case 50: /* reduce AAddExpressionLvl3 */
            {
                ArrayList<Object> list = new50();
                push(goTo(17), list);
            }
            break;
            case 51: /* reduce ASubExpressionLvl3 */
            {
                ArrayList<Object> list = new51();
                push(goTo(17), list);
            }
            break;
            case 52: /* reduce APassExpressionLvl3 */
            {
                ArrayList<Object> list = new52();
                push(goTo(17), list);
            }
            break;
            case 53: /* reduce AMulExpressionLvl2 */
            {
                ArrayList<Object> list = new53();
                push(goTo(18), list);
            }
            break;
            case 54: /* reduce ADivExpressionLvl2 */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list);
            }
            break;
            case 55: /* reduce APassExpressionLvl2 */
            {
                ArrayList<Object> list = new55();
                push(goTo(18), list);
            }
            break;
            case 56: /* reduce ANotExpressionLvl1 */
            {
                ArrayList<Object> list = new56();
                push(goTo(19), list);
            }
            break;
            case 57: /* reduce ANegExpressionLvl1 */
            {
                ArrayList<Object> list = new57();
                push(goTo(19), list);
            }
            break;
            case 58: /* reduce APassExpressionLvl1 */
            {
                ArrayList<Object> list = new58();
                push(goTo(19), list);
            }
            break;
            case 59: /* reduce AArrayExpressionLvl0 */
            {
                ArrayList<Object> list = new59();
                push(goTo(20), list);
            }
            break;
            case 60: /* reduce AAmethodcalexpressionlvl01ExpressionLvl0 */
            {
                ArrayList<Object> list = new60();
                push(goTo(20), list);
            }
            break;
            case 61: /* reduce AAmethodcalexpressionlvl02ExpressionLvl0 */
            {
                ArrayList<Object> list = new61();
                push(goTo(20), list);
            }
            break;
            case 62: /* reduce AAmethodcalexpressionlvl03ExpressionLvl0 */
            {
                ArrayList<Object> list = new62();
                push(goTo(20), list);
            }
            break;
            case 63: /* reduce AAmethodcalexpressionlvl04ExpressionLvl0 */
            {
                ArrayList<Object> list = new63();
                push(goTo(20), list);
            }
            break;
            case 64: /* reduce AIntExpressionLvl0 */
            {
                ArrayList<Object> list = new64();
                push(goTo(20), list);
            }
            break;
            case 65: /* reduce AStringExpressionLvl0 */
            {
                ArrayList<Object> list = new65();
                push(goTo(20), list);
            }
            break;
            case 66: /* reduce ATrueExpressionLvl0 */
            {
                ArrayList<Object> list = new66();
                push(goTo(20), list);
            }
            break;
            case 67: /* reduce AFalseExpressionLvl0 */
            {
                ArrayList<Object> list = new67();
                push(goTo(20), list);
            }
            break;
            case 68: /* reduce AIdentifierExpressionLvl0 */
            {
                ArrayList<Object> list = new68();
                push(goTo(20), list);
            }
            break;
            case 69: /* reduce AThisExpressionLvl0 */
            {
                ArrayList<Object> list = new69();
                push(goTo(20), list);
            }
            break;
            case 70: /* reduce AAnewobjexpressionlvl01ExpressionLvl0 */
            {
                ArrayList<Object> list = new70();
                push(goTo(20), list);
            }
            break;
            case 71: /* reduce AAnewobjexpressionlvl02ExpressionLvl0 */
            {
                ArrayList<Object> list = new71();
                push(goTo(20), list);
            }
            break;
            case 72: /* reduce ANewIntArrExpressionLvl0 */
            {
                ArrayList<Object> list = new72();
                push(goTo(20), list);
            }
            break;
            case 73: /* reduce ANewStrArrExpressionLvl0 */
            {
                ArrayList<Object> list = new73();
                push(goTo(20), list);
            }
            break;
            case 74: /* reduce AParenExpressionLvl0 */
            {
                ArrayList<Object> list = new74();
                push(goTo(20), list);
            }
            break;
            case 75: /* reduce AMethodCallExpr */
            {
                ArrayList<Object> list = new75();
                push(goTo(21), list);
            }
            break;
            case 76: /* reduce ATerminal$ClassDefinition */
            {
                ArrayList<Object> list = new76();
                push(goTo(22), list);
            }
            break;
            case 77: /* reduce ANonTerminal$ClassDefinition */
            {
                ArrayList<Object> list = new77();
                push(goTo(22), list);
            }
            break;
            case 78: /* reduce ATerminal$VariableDefinition */
            {
                ArrayList<Object> list = new78();
                push(goTo(23), list);
            }
            break;
            case 79: /* reduce ANonTerminal$VariableDefinition */
            {
                ArrayList<Object> list = new79();
                push(goTo(23), list);
            }
            break;
            case 80: /* reduce ATerminal$MethodDefinition */
            {
                ArrayList<Object> list = new80();
                push(goTo(24), list);
            }
            break;
            case 81: /* reduce ANonTerminal$MethodDefinition */
            {
                ArrayList<Object> list = new81();
                push(goTo(24), list);
            }
            break;
            case 82: /* reduce ATerminal$Statement */
            {
                ArrayList<Object> list = new82();
                push(goTo(25), list);
            }
            break;
            case 83: /* reduce ANonTerminal$Statement */
            {
                ArrayList<Object> list = new83();
                push(goTo(25), list);
            }
            break;
            case 84: /* reduce ATerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new84();
                push(goTo(26), list);
            }
            break;
            case 85: /* reduce ANonTerminal$ArgumentListTail */
            {
                ArrayList<Object> list = new85();
                push(goTo(26), list);
            }
            break;
            case 86: /* reduce ATerminal$ValuesListTail */
            {
                ArrayList<Object> list = new86();
                push(goTo(27), list);
            }
            break;
            case 87: /* reduce ANonTerminal$ValuesListTail */
            {
                ArrayList<Object> list = new87();
                push(goTo(27), list);
            }
            break;
            case 88: /* reduce ATerminal$ObjectCall */
            {
                ArrayList<Object> list = new88();
                push(goTo(28), list);
            }
            break;
            case 89: /* reduce ANonTerminal$ObjectCall */
            {
                ArrayList<Object> list = new89();
                push(goTo(28), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PClassDefinition pclassdefinitionNode2;
        pclassdefinitionNode2 = (PClassDefinition)nodeArrayList1.get(0);
	if(pclassdefinitionNode2 != null)
	{
	  listNode3.add(pclassdefinitionNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PClassDefinition pclassdefinitionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pclassdefinitionNode2 = (PClassDefinition)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pclassdefinitionNode2 != null)
	{
	  listNode4.add(pclassdefinitionNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstartNode1 = new AStart(listNode4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAclassdefinition1ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pclassdefinitionNode1 = new AClassDefinition(tidentifierNode2, null, listNode4, listNode5);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAclassdefinition2ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExtendsClass pextendsclassNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pextendsclassNode3 = (PExtendsClass)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pclassdefinitionNode1 = new AClassDefinition(tidentifierNode2, pextendsclassNode3, listNode4, listNode5);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAclassdefinition3ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pclassdefinitionNode1 = new AClassDefinition(tidentifierNode2, null, listNode5, listNode6);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAclassdefinition4ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExtendsClass pextendsclassNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pextendsclassNode3 = (PExtendsClass)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }

        pclassdefinitionNode1 = new AClassDefinition(tidentifierNode2, pextendsclassNode3, listNode5, listNode6);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAclassdefinition5ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassdefinitionNode1 = new AClassDefinition(tidentifierNode2, null, listNode4, listNode6);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAclassdefinition6ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExtendsClass pextendsclassNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pextendsclassNode3 = (PExtendsClass)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pclassdefinitionNode1 = new AClassDefinition(tidentifierNode2, pextendsclassNode3, listNode4, listNode6);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAclassdefinition7ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassdefinitionNode1 = new AClassDefinition(tidentifierNode2, null, listNode5, listNode7);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAclassdefinition8ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDefinition pclassdefinitionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExtendsClass pextendsclassNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pextendsclassNode3 = (PExtendsClass)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pclassdefinitionNode1 = new AClassDefinition(tidentifierNode2, pextendsclassNode3, listNode5, listNode7);
        }
	nodeList.add(pclassdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AExtendsProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExtendsClass pextendsclassNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);

        pextendsclassNode1 = new AExtendsClass(tidentifierNode2);
        }
	nodeList.add(pextendsclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AVariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pvariableNode1 = new AVariable(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAmethoddefinition1MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidentifierNode3, listNode4, listNode5, listNode7);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAmethoddefinition2MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList8.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidentifierNode3, listNode5, listNode6, listNode8);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAmethoddefinition3MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList8.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidentifierNode3, listNode4, listNode6, listNode8);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAmethoddefinition4MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList9.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pmethodNode1 = new AMethod(ptypeNode2, tidentifierNode3, listNode5, listNode7, listNode9);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AIntArrayTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntArrayType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AStrArrayTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TStringClass tstringclassNode2;
        tstringclassNode2 = (TStringClass)nodeArrayList1.get(0);

        ptypeNode1 = new AStringArrayType(tstringclassNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AIntTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ABooleanTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AStringTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TStringClass tstringclassNode2;
        tstringclassNode2 = (TStringClass)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringclassNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AVoidTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        ptypeNode1 = new AVoidType(tvoidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ACustomTypeProduction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ptypeNode1 = new ACustomType(tidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAargumentlist1ArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PArgument pargumentNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pargumentNode1 = new AArgument(ptypeNode2, tidentifierNode3);
        }
	if(pargumentNode1 != null)
	{
	  listNode4.add(pargumentNode1);
	}
        }
	nodeList.add(listNode4);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAargumentlist2ArgumentList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        PArgument pargumentNode1;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pargumentNode1 = new AArgument(ptypeNode2, tidentifierNode3);
        }
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(pargumentNode1 != null)
	{
	  listNode5.add(pargumentNode1);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);

        pargumentNode1 = new AArgument(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAvalueslist1ValuesList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAvalueslist2ValuesList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode3.add(pexpressionNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AValuesListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new AIfStatement(pexpressionNode2, listNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new AWhileStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignmentStatement(tidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AArrayAssiStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new AArrayAssignmentStatement(tidentifierNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAmethodcalstatement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode2 != null)
	{
	  listNode3.add(tidentifierNode2);
	}
        }
        {
            // Block
        }

        pstatementNode1 = new AMethodCallStatement(listNode3, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAmethodcalstatement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(tidentifierNode2 != null)
	{
	  listNode4.add(tidentifierNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pstatementNode1 = new AMethodCallStatement(listNode4, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAmethodcalstatement3Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode2 != null)
	{
	  listNode3.add(tidentifierNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new AMethodCallStatement(listNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAmethodcalstatement4Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(tidentifierNode2 != null)
	{
	  listNode4.add(tidentifierNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new AMethodCallStatement(listNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAstatementblock1StatementBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAstatementblock2StatementBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AObjectCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList2.get(0);
	nodeList.add(tidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AOrExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AOrExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce APassExpressionLvl6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAndExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAndExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce APassExpressionLvl5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AQtExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AGreaterThanExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ALtExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ALessThanExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AEqExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AEqualsExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce APassExpressionLvl4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAddExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAdditionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ASubExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubtractionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce APassExpressionLvl3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AMulExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultiplicationExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ADivExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivisionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce APassExpressionLvl2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ANotExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ANegExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce APassExpressionLvl1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AArrayExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AArrayExpression(tidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAmethodcalexpressionlvl01ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pexpressionNode1 = new AMethodCallExpression(null, tidentifierNode3, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAmethodcalexpressionlvl02ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }

        pexpressionNode1 = new AMethodCallExpression(pexpressionNode2, tidentifierNode3, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAmethodcalexpressionlvl03ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new AMethodCallExpression(null, tidentifierNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAmethodcalexpressionlvl04ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new AMethodCallExpression(pexpressionNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AIntExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIntegerLiteral tintegerliteralNode2;
        tintegerliteralNode2 = (TIntegerLiteral)nodeArrayList1.get(0);

        pexpressionNode1 = new AIntExpression(tintegerliteralNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AStringExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pexpressionNode1 = new AStringExpression(tstringliteralNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATrueExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpressionNode1 = new ATrueExpression(ttrueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AFalseExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpressionNode1 = new AFalseExpression(tfalseNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AIdentifierExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdentifierExpression(tidentifierNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AThisExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TThis tthisNode2;
        tthisNode2 = (TThis)nodeArrayList1.get(0);

        pexpressionNode1 = new AThisExpression(tthisNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAnewobjexpressionlvl01ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }

        pexpressionNode1 = new ANewObjectExpression(tidentifierNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AAnewobjexpressionlvl02ExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new ANewObjectExpression(tidentifierNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANewIntArrExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList4.get(0);

        pexpressionNode1 = new ANewIntArrayExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ANewStrArrExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList4.get(0);

        pexpressionNode1 = new ANewStringArrayExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AParenExpressionLvl0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AMethodCallExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ATerminal$ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassDefinition pclassdefinitionNode1;
        pclassdefinitionNode1 = (PClassDefinition)nodeArrayList1.get(0);
	if(pclassdefinitionNode1 != null)
	{
	  listNode2.add(pclassdefinitionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ANonTerminal$ClassDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PClassDefinition pclassdefinitionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdefinitionNode2 = (PClassDefinition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdefinitionNode2 != null)
	{
	  listNode3.add(pclassdefinitionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ATerminal$VariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVariable pvariableNode1;
        pvariableNode1 = (PVariable)nodeArrayList1.get(0);
	if(pvariableNode1 != null)
	{
	  listNode2.add(pvariableNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ANonTerminal$VariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVariable pvariableNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvariableNode2 = (PVariable)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvariableNode2 != null)
	{
	  listNode3.add(pvariableNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ATerminal$MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethod pmethodNode1;
        pmethodNode1 = (PMethod)nodeArrayList1.get(0);
	if(pmethodNode1 != null)
	{
	  listNode2.add(pmethodNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANonTerminal$MethodDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethod pmethodNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethodNode2 = (PMethod)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethodNode2 != null)
	{
	  listNode3.add(pmethodNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$ArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgument pargumentNode1;
        pargumentNode1 = (PArgument)nodeArrayList1.get(0);
	if(pargumentNode1 != null)
	{
	  listNode2.add(pargumentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$ArgumentListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgument pargumentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentNode2 = (PArgument)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentNode2 != null)
	{
	  listNode3.add(pargumentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ATerminal$ValuesListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANonTerminal$ValuesListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ATerminal$ObjectCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ANonTerminal$ObjectCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TIdentifier tidentifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidentifierNode2 != null)
	{
	  listNode3.add(tidentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {4, SHIFT, 1}, },
			{{-1, ERROR, 1}, {38, SHIFT, 4}, },
			{{-1, ERROR, 2}, {40, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {4, SHIFT, 1}, },
			{{-1, ERROR, 4}, {19, SHIFT, 7}, {21, SHIFT, 8}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 1}, {4, SHIFT, 1}, },
			{{-1, ERROR, 7}, {5, SHIFT, 11}, {6, SHIFT, 12}, {7, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {20, SHIFT, 16}, {38, SHIFT, 17}, },
			{{-1, ERROR, 8}, {8, SHIFT, 23}, },
			{{-1, ERROR, 9}, {19, SHIFT, 24}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 11}, {6, SHIFT, 12}, {7, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 20}, {23, SHIFT, 26}, },
			{{-1, REDUCE, 18}, {23, SHIFT, 27}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 20}, {38, SHIFT, 28}, },
			{{-1, ERROR, 21}, {5, SHIFT, 11}, {6, SHIFT, 12}, {7, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {20, SHIFT, 29}, {38, SHIFT, 17}, },
			{{-1, ERROR, 22}, {5, SHIFT, 11}, {20, SHIFT, 32}, },
			{{-1, ERROR, 23}, {38, SHIFT, 34}, },
			{{-1, ERROR, 24}, {5, SHIFT, 11}, {6, SHIFT, 12}, {7, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {20, SHIFT, 35}, {38, SHIFT, 17}, },
			{{-1, ERROR, 25}, {38, SHIFT, 38}, },
			{{-1, ERROR, 26}, {24, SHIFT, 39}, },
			{{-1, ERROR, 27}, {24, SHIFT, 40}, },
			{{-1, ERROR, 28}, {25, SHIFT, 41}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 31}, {5, SHIFT, 11}, {20, SHIFT, 42}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 34}, {22, SHIFT, 43}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 36}, {5, SHIFT, 11}, {6, SHIFT, 12}, {7, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {20, SHIFT, 44}, {38, SHIFT, 17}, },
			{{-1, ERROR, 37}, {5, SHIFT, 11}, {20, SHIFT, 46}, },
			{{-1, ERROR, 38}, {21, SHIFT, 47}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 45}, {5, SHIFT, 11}, {20, SHIFT, 48}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 47}, {6, SHIFT, 12}, {7, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {22, SHIFT, 49}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 49}, {19, SHIFT, 52}, },
			{{-1, ERROR, 50}, {38, SHIFT, 53}, },
			{{-1, ERROR, 51}, {22, SHIFT, 54}, },
			{{-1, ERROR, 52}, {6, SHIFT, 12}, {7, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {11, SHIFT, 55}, {13, SHIFT, 56}, {18, SHIFT, 57}, {38, SHIFT, 58}, },
			{{-1, REDUCE, 23}, {34, SHIFT, 62}, },
			{{-1, ERROR, 54}, {19, SHIFT, 65}, },
			{{-1, ERROR, 55}, {21, SHIFT, 66}, },
			{{-1, ERROR, 56}, {21, SHIFT, 67}, },
			{{-1, ERROR, 57}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, REDUCE, 22}, {21, SHIFT, 87}, {23, SHIFT, 88}, {26, SHIFT, 89}, {33, SHIFT, 90}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 60}, {6, SHIFT, 12}, {7, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {11, SHIFT, 55}, {13, SHIFT, 56}, {18, SHIFT, 57}, {38, SHIFT, 58}, },
			{{-1, ERROR, 61}, {11, SHIFT, 55}, {13, SHIFT, 56}, {18, SHIFT, 57}, {20, SHIFT, 94}, {38, SHIFT, 95}, },
			{{-1, ERROR, 62}, {6, SHIFT, 12}, {7, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 24}, {34, SHIFT, 62}, },
			{{-1, ERROR, 65}, {6, SHIFT, 12}, {7, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {11, SHIFT, 55}, {13, SHIFT, 56}, {18, SHIFT, 57}, {38, SHIFT, 58}, },
			{{-1, ERROR, 66}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 67}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 73}, {7, SHIFT, 103}, {9, SHIFT, 104}, {38, SHIFT, 105}, },
			{{-1, ERROR, 74}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 75}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 76}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, REDUCE, 68}, {21, SHIFT, 109}, {23, SHIFT, 110}, },
			{{-1, ERROR, 78}, {25, SHIFT, 111}, },
			{{-1, REDUCE, 41}, {36, SHIFT, 112}, },
			{{-1, REDUCE, 43}, {37, SHIFT, 113}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 49}, {26, SHIFT, 114}, {27, SHIFT, 115}, {28, SHIFT, 116}, {29, SHIFT, 117}, {30, SHIFT, 118}, },
			{{-1, REDUCE, 52}, {31, SHIFT, 119}, {32, SHIFT, 120}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 58}, {33, SHIFT, 121}, },
			{{-1, ERROR, 86}, {38, SHIFT, 122}, },
			{{-1, ERROR, 87}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {22, SHIFT, 123}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 88}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 89}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 90}, {38, SHIFT, 128}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 92}, {21, SHIFT, 129}, {33, SHIFT, 90}, },
			{{-1, ERROR, 93}, {11, SHIFT, 55}, {13, SHIFT, 56}, {18, SHIFT, 57}, {20, SHIFT, 131}, {38, SHIFT, 95}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 95}, {21, SHIFT, 87}, {23, SHIFT, 88}, {26, SHIFT, 89}, {33, SHIFT, 90}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 97}, {38, SHIFT, 132}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 99}, {6, SHIFT, 12}, {7, SHIFT, 13}, {9, SHIFT, 14}, {10, SHIFT, 15}, {11, SHIFT, 55}, {13, SHIFT, 56}, {18, SHIFT, 57}, {38, SHIFT, 58}, },
			{{-1, ERROR, 100}, {11, SHIFT, 55}, {13, SHIFT, 56}, {18, SHIFT, 57}, {20, SHIFT, 134}, {38, SHIFT, 95}, },
			{{-1, ERROR, 101}, {22, SHIFT, 135}, },
			{{-1, ERROR, 102}, {22, SHIFT, 136}, },
			{{-1, ERROR, 103}, {23, SHIFT, 137}, },
			{{-1, ERROR, 104}, {23, SHIFT, 138}, },
			{{-1, ERROR, 105}, {21, SHIFT, 139}, },
			{{-1, ERROR, 106}, {22, SHIFT, 140}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 109}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {22, SHIFT, 141}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 110}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 112}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 113}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 114}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 115}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 116}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 117}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 118}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 119}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 120}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 122}, {21, SHIFT, 153}, },
			{{-1, ERROR, 123}, {25, SHIFT, 154}, },
			{{-1, ERROR, 124}, {22, SHIFT, 155}, },
			{{-1, REDUCE, 26}, {34, SHIFT, 156}, },
			{{-1, ERROR, 126}, {24, SHIFT, 159}, },
			{{-1, ERROR, 127}, {25, SHIFT, 160}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 129}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {22, SHIFT, 161}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 133}, {11, SHIFT, 55}, {13, SHIFT, 56}, {18, SHIFT, 57}, {20, SHIFT, 163}, {38, SHIFT, 95}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 135}, {19, SHIFT, 164}, },
			{{-1, ERROR, 136}, {19, SHIFT, 164}, },
			{{-1, ERROR, 137}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 138}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, ERROR, 139}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {22, SHIFT, 169}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 142}, {22, SHIFT, 171}, },
			{{-1, ERROR, 143}, {24, SHIFT, 172}, },
			{{-1, REDUCE, 42}, {37, SHIFT, 113}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 48}, {29, SHIFT, 117}, {30, SHIFT, 118}, },
			{{-1, REDUCE, 47}, {29, SHIFT, 117}, {30, SHIFT, 118}, },
			{{-1, REDUCE, 46}, {29, SHIFT, 117}, {30, SHIFT, 118}, },
			{{-1, REDUCE, 50}, {31, SHIFT, 119}, {32, SHIFT, 120}, },
			{{-1, REDUCE, 51}, {31, SHIFT, 119}, {32, SHIFT, 120}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 153}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {22, SHIFT, 173}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 155}, {25, SHIFT, 175}, },
			{{-1, ERROR, 156}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 27}, {34, SHIFT, 156}, },
			{{-1, ERROR, 159}, {26, SHIFT, 178}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 161}, {25, SHIFT, 179}, },
			{{-1, ERROR, 162}, {22, SHIFT, 180}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 164}, {11, SHIFT, 55}, {13, SHIFT, 56}, {18, SHIFT, 57}, {20, SHIFT, 181}, {38, SHIFT, 95}, },
			{{-1, ERROR, 165}, {12, SHIFT, 183}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 167}, {24, SHIFT, 184}, },
			{{-1, ERROR, 168}, {24, SHIFT, 185}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 170}, {22, SHIFT, 186}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 174}, {22, SHIFT, 187}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 178}, {0, SHIFT, 68}, {3, SHIFT, 69}, {14, SHIFT, 70}, {15, SHIFT, 71}, {16, SHIFT, 72}, {17, SHIFT, 73}, {21, SHIFT, 74}, {30, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 180}, {25, SHIFT, 189}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 182}, {11, SHIFT, 55}, {13, SHIFT, 56}, {18, SHIFT, 57}, {20, SHIFT, 190}, {38, SHIFT, 95}, },
			{{-1, ERROR, 183}, {19, SHIFT, 164}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 188}, {25, SHIFT, 192}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 33}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {3, 5}, {6, 10}, },
			{{-1, 9}, },
			{{-1, 18}, {21, 30}, {36, 30}, {60, 30}, {99, 30}, },
			{{-1, 19}, {22, 33}, {31, 33}, {37, 33}, {45, 33}, },
			{{-1, 20}, {11, 25}, {47, 50}, {62, 97}, },
			{{-1, 51}, },
			{{-1, 63}, {64, 98}, },
			{{-1, 124}, {109, 142}, {129, 162}, {139, 170}, {153, 174}, },
			{{-1, 157}, {158, 177}, },
			{{-1, 59}, {61, 96}, {93, 96}, {100, 96}, {133, 96}, {182, 96}, },
			{{-1, 165}, {136, 166}, {183, 191}, },
			{{-1, 91}, {92, 130}, },
			{{-1, 125}, {57, 78}, {66, 101}, {67, 102}, {74, 106}, {88, 126}, {89, 127}, {110, 143}, {137, 167}, {138, 168}, {156, 176}, {178, 188}, },
			{{-1, 79}, },
			{{-1, 80}, {112, 144}, },
			{{-1, 81}, {113, 145}, },
			{{-1, 82}, {114, 146}, {115, 147}, {116, 148}, },
			{{-1, 83}, {117, 149}, {118, 150}, },
			{{-1, 84}, {75, 107}, {76, 108}, {119, 151}, {120, 152}, },
			{{-1, 85}, },
			{{-1, 86}, },
			{{-1, 6}, },
			{{-1, 21}, {24, 36}, {52, 60}, {65, 99}, },
			{{-1, 22}, {21, 31}, {24, 37}, {36, 45}, },
			{{-1, 61}, {60, 93}, {65, 100}, {99, 133}, {164, 182}, },
			{{-1, 64}, },
			{{-1, 158}, },
			{{-1, 92}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '{', '('",
			"expecting: 'public', 'void', 'String', 'int', 'boolean', '}', identifier",
			"expecting: 'extends'",
			"expecting: '{'",
			"expecting: 'void', 'String', 'int', 'boolean', identifier",
			"expecting: '[', identifier",
			"expecting: 'public', 'void', 'String', 'int', 'boolean', 'if', 'while', 'return', '}', identifier",
			"expecting: 'public', '}'",
			"expecting: ']'",
			"expecting: ';'",
			"expecting: ')'",
			"expecting: '('",
			"expecting: 'void', 'String', 'int', 'boolean', ')', identifier",
			"expecting: 'void', 'String', 'int', 'boolean', 'if', 'while', 'return', identifier",
			"expecting: ')', ','",
			"expecting: string literal, integer literal, 'true', 'false', 'this', 'new', '(', '-', '!', identifier",
			"expecting: '(', '[', '=', '.', identifier",
			"expecting: 'if', 'while', 'return', '}', identifier",
			"expecting: ')', ']', ';', '=', '<', '>', '+', '-', '*', '/', '.', ',', '||', '&&'",
			"expecting: 'String', 'int', identifier",
			"expecting: '(', ')', '[', ']', ';', '=', '<', '>', '+', '-', '*', '/', '.', ',', '||', '&&'",
			"expecting: ')', ']', ';', ',', '||'",
			"expecting: ')', ']', ';', ',', '||', '&&'",
			"expecting: ')', ']', ';', '=', '<', '>', '+', '-', ',', '||', '&&'",
			"expecting: ')', ']', ';', '=', '<', '>', '+', '-', '*', '/', ',', '||', '&&'",
			"expecting: string literal, integer literal, 'true', 'false', 'this', 'new', '(', ')', '-', '!', identifier",
			"expecting: '(', '.'",
			"expecting: '(', '[', '=', '.'",
			"expecting: '['",
			"expecting: ')', ']', ';', '+', '-', ',', '||', '&&'",
			"expecting: '='",
			"expecting: 'else'",
			"expecting: 'if', 'else', 'while', 'return', '}', identifier",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 3, 3, 5, 6, 7, 3, 8, 1, 9, 9, 1, 3, 1, 10, 11, 1, 5, 11, 1, 5, 1, 12, 12, 13, 3, 10, 11, 3, 11, 14, 3, 5, 11, 15, 1, 1, 10, 3, 7, 3, 11, 3, 16, 3, 7, 1, 14, 17, 18, 7, 15, 15, 19, 20, 21, 17, 21, 8, 18, 18, 17, 19, 19, 22, 22, 22, 22, 22, 23, 19, 19, 19, 24, 13, 25, 26, 26, 27, 28, 28, 22, 1, 29, 19, 19, 1, 30, 30, 21, 11, 31, 21, 1, 18, 17, 21, 14, 14, 32, 32, 15, 14, 28, 28, 29, 19, 21, 19, 19, 19, 19, 19, 19, 19, 19, 19, 1, 15, 13, 14, 18, 12, 13, 30, 29, 30, 11, 18, 21, 11, 7, 7, 19, 19, 29, 22, 22, 14, 12, 26, 26, 33, 33, 33, 28, 28, 28, 28, 29, 21, 13, 19, 18, 18, 34, 21, 13, 14, 11, 21, 35, 21, 12, 12, 22, 14, 22, 22, 22, 14, 21, 18, 18, 19, 21, 13, 36, 21, 7, 22, 22, 22, 22, 13, 21, 36, 21, 21, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
