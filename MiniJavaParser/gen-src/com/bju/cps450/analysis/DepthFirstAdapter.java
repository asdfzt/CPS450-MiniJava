/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import java.util.*;
import com.bju.cps450.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        {
            List<PClassDefinition> copy = new ArrayList<PClassDefinition>(node.getRest());
            for(PClassDefinition e : copy)
            {
                e.apply(this);
            }
        }
        outAStart(node);
    }

    public void inAClassDefinition(AClassDefinition node)
    {
        defaultIn(node);
    }

    public void outAClassDefinition(AClassDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDefinition(AClassDefinition node)
    {
        inAClassDefinition(node);
        if(node.getClasskey() != null)
        {
            node.getClasskey().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtendsProduction() != null)
        {
            node.getExtendsProduction().apply(this);
        }
        if(node.getLeftCurly() != null)
        {
            node.getLeftCurly().apply(this);
        }
        {
            List<PVariableDefinition> copy = new ArrayList<PVariableDefinition>(node.getVariableDefinition());
            for(PVariableDefinition e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PMethodDefinition> copy = new ArrayList<PMethodDefinition>(node.getMethodDefinition());
            for(PMethodDefinition e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRightCurly() != null)
        {
            node.getRightCurly().apply(this);
        }
        outAClassDefinition(node);
    }

    public void inAExtendsProduction(AExtendsProduction node)
    {
        defaultIn(node);
    }

    public void outAExtendsProduction(AExtendsProduction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsProduction(AExtendsProduction node)
    {
        inAExtendsProduction(node);
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        outAExtendsProduction(node);
    }

    public void inAVariableDefinition(AVariableDefinition node)
    {
        defaultIn(node);
    }

    public void outAVariableDefinition(AVariableDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDefinition(AVariableDefinition node)
    {
        inAVariableDefinition(node);
        if(node.getTypeProduction() != null)
        {
            node.getTypeProduction().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVariableDefinition(node);
    }

    public void inAMethodDefinition(AMethodDefinition node)
    {
        defaultIn(node);
    }

    public void outAMethodDefinition(AMethodDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDefinition(AMethodDefinition node)
    {
        inAMethodDefinition(node);
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        if(node.getTypeProduction() != null)
        {
            node.getTypeProduction().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getLeftCurly() != null)
        {
            node.getLeftCurly().apply(this);
        }
        {
            List<PVariableDefinition> copy = new ArrayList<PVariableDefinition>(node.getVariableDefinition());
            for(PVariableDefinition e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRightCurly() != null)
        {
            node.getRightCurly().apply(this);
        }
        outAMethodDefinition(node);
    }

    public void inAIntArrayTypeProduction(AIntArrayTypeProduction node)
    {
        defaultIn(node);
    }

    public void outAIntArrayTypeProduction(AIntArrayTypeProduction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntArrayTypeProduction(AIntArrayTypeProduction node)
    {
        inAIntArrayTypeProduction(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        outAIntArrayTypeProduction(node);
    }

    public void inAStrArrayTypeProduction(AStrArrayTypeProduction node)
    {
        defaultIn(node);
    }

    public void outAStrArrayTypeProduction(AStrArrayTypeProduction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrArrayTypeProduction(AStrArrayTypeProduction node)
    {
        inAStrArrayTypeProduction(node);
        if(node.getStringClass() != null)
        {
            node.getStringClass().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        outAStrArrayTypeProduction(node);
    }

    public void inAIntTypeProduction(AIntTypeProduction node)
    {
        defaultIn(node);
    }

    public void outAIntTypeProduction(AIntTypeProduction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTypeProduction(AIntTypeProduction node)
    {
        inAIntTypeProduction(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntTypeProduction(node);
    }

    public void inABooleanTypeProduction(ABooleanTypeProduction node)
    {
        defaultIn(node);
    }

    public void outABooleanTypeProduction(ABooleanTypeProduction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanTypeProduction(ABooleanTypeProduction node)
    {
        inABooleanTypeProduction(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanTypeProduction(node);
    }

    public void inAStringTypeProduction(AStringTypeProduction node)
    {
        defaultIn(node);
    }

    public void outAStringTypeProduction(AStringTypeProduction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTypeProduction(AStringTypeProduction node)
    {
        inAStringTypeProduction(node);
        if(node.getStringClass() != null)
        {
            node.getStringClass().apply(this);
        }
        outAStringTypeProduction(node);
    }

    public void inAVoidTypeProduction(AVoidTypeProduction node)
    {
        defaultIn(node);
    }

    public void outAVoidTypeProduction(AVoidTypeProduction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidTypeProduction(AVoidTypeProduction node)
    {
        inAVoidTypeProduction(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidTypeProduction(node);
    }

    public void inACustomTypeProduction(ACustomTypeProduction node)
    {
        defaultIn(node);
    }

    public void outACustomTypeProduction(ACustomTypeProduction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACustomTypeProduction(ACustomTypeProduction node)
    {
        inACustomTypeProduction(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outACustomTypeProduction(node);
    }

    public void inAArgumentList(AArgumentList node)
    {
        defaultIn(node);
    }

    public void outAArgumentList(AArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentList(AArgumentList node)
    {
        inAArgumentList(node);
        if(node.getTypeProduction() != null)
        {
            node.getTypeProduction().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PArgumentListTail> copy = new ArrayList<PArgumentListTail>(node.getArgumentListTail());
            for(PArgumentListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAArgumentList(node);
    }

    public void inAArgumentListTail(AArgumentListTail node)
    {
        defaultIn(node);
    }

    public void outAArgumentListTail(AArgumentListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentListTail(AArgumentListTail node)
    {
        inAArgumentListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTypeProduction() != null)
        {
            node.getTypeProduction().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArgumentListTail(node);
    }

    public void inAValuesList(AValuesList node)
    {
        defaultIn(node);
    }

    public void outAValuesList(AValuesList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValuesList(AValuesList node)
    {
        inAValuesList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PValuesListTail> copy = new ArrayList<PValuesListTail>(node.getValuesListTail());
            for(PValuesListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAValuesList(node);
    }

    public void inAValuesListTail(AValuesListTail node)
    {
        defaultIn(node);
    }

    public void outAValuesListTail(AValuesListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValuesListTail(AValuesListTail node)
    {
        inAValuesListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAValuesListTail(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getStatementBlock() != null)
        {
            node.getStatementBlock().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inAArrayAssiStatement(AArrayAssiStatement node)
    {
        defaultIn(node);
    }

    public void outAArrayAssiStatement(AArrayAssiStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAssiStatement(AArrayAssiStatement node)
    {
        inAArrayAssiStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getPosition() != null)
        {
            node.getPosition().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAArrayAssiStatement(node);
    }

    public void inAMethodCalStatement(AMethodCalStatement node)
    {
        defaultIn(node);
    }

    public void outAMethodCalStatement(AMethodCalStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCalStatement(AMethodCalStatement node)
    {
        inAMethodCalStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PObjectCall> copy = new ArrayList<PObjectCall>(node.getObjectCall());
            for(PObjectCall e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getValuesList() != null)
        {
            node.getValuesList().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAMethodCalStatement(node);
    }

    public void inAStatementBlock(AStatementBlock node)
    {
        defaultIn(node);
    }

    public void outAStatementBlock(AStatementBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementBlock(AStatementBlock node)
    {
        inAStatementBlock(node);
        if(node.getLeftCurly() != null)
        {
            node.getLeftCurly().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRightCurly() != null)
        {
            node.getRightCurly().apply(this);
        }
        outAStatementBlock(node);
    }

    public void inAObjectCall(AObjectCall node)
    {
        defaultIn(node);
    }

    public void outAObjectCall(AObjectCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjectCall(AObjectCall node)
    {
        inAObjectCall(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAObjectCall(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getExpressionLvl6() != null)
        {
            node.getExpressionLvl6().apply(this);
        }
        outAExpression(node);
    }

    public void inAOrExpressionLvl6(AOrExpressionLvl6 node)
    {
        defaultIn(node);
    }

    public void outAOrExpressionLvl6(AOrExpressionLvl6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpressionLvl6(AOrExpressionLvl6 node)
    {
        inAOrExpressionLvl6(node);
        if(node.getExpressionLvl6() != null)
        {
            node.getExpressionLvl6().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExpressionLvl5() != null)
        {
            node.getExpressionLvl5().apply(this);
        }
        outAOrExpressionLvl6(node);
    }

    public void inAPassExpressionLvl6(APassExpressionLvl6 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl6(APassExpressionLvl6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl6(APassExpressionLvl6 node)
    {
        inAPassExpressionLvl6(node);
        if(node.getExpressionLvl5() != null)
        {
            node.getExpressionLvl5().apply(this);
        }
        outAPassExpressionLvl6(node);
    }

    public void inAAndExpressionLvl5(AAndExpressionLvl5 node)
    {
        defaultIn(node);
    }

    public void outAAndExpressionLvl5(AAndExpressionLvl5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpressionLvl5(AAndExpressionLvl5 node)
    {
        inAAndExpressionLvl5(node);
        if(node.getExpressionLvl5() != null)
        {
            node.getExpressionLvl5().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExpressionLvl4() != null)
        {
            node.getExpressionLvl4().apply(this);
        }
        outAAndExpressionLvl5(node);
    }

    public void inAPassExpressionLvl5(APassExpressionLvl5 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl5(APassExpressionLvl5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl5(APassExpressionLvl5 node)
    {
        inAPassExpressionLvl5(node);
        if(node.getExpressionLvl4() != null)
        {
            node.getExpressionLvl4().apply(this);
        }
        outAPassExpressionLvl5(node);
    }

    public void inAQtExpressionLvl4(AQtExpressionLvl4 node)
    {
        defaultIn(node);
    }

    public void outAQtExpressionLvl4(AQtExpressionLvl4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAQtExpressionLvl4(AQtExpressionLvl4 node)
    {
        inAQtExpressionLvl4(node);
        if(node.getExpressionLvl4() != null)
        {
            node.getExpressionLvl4().apply(this);
        }
        if(node.getGreaterThan() != null)
        {
            node.getGreaterThan().apply(this);
        }
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        outAQtExpressionLvl4(node);
    }

    public void inALtExpressionLvl4(ALtExpressionLvl4 node)
    {
        defaultIn(node);
    }

    public void outALtExpressionLvl4(ALtExpressionLvl4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExpressionLvl4(ALtExpressionLvl4 node)
    {
        inALtExpressionLvl4(node);
        if(node.getExpressionLvl4() != null)
        {
            node.getExpressionLvl4().apply(this);
        }
        if(node.getLessThan() != null)
        {
            node.getLessThan().apply(this);
        }
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        outALtExpressionLvl4(node);
    }

    public void inAEqExpressionLvl4(AEqExpressionLvl4 node)
    {
        defaultIn(node);
    }

    public void outAEqExpressionLvl4(AEqExpressionLvl4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExpressionLvl4(AEqExpressionLvl4 node)
    {
        inAEqExpressionLvl4(node);
        if(node.getExpressionLvl4() != null)
        {
            node.getExpressionLvl4().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        outAEqExpressionLvl4(node);
    }

    public void inAPassExpressionLvl4(APassExpressionLvl4 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl4(APassExpressionLvl4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl4(APassExpressionLvl4 node)
    {
        inAPassExpressionLvl4(node);
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        outAPassExpressionLvl4(node);
    }

    public void inAAddExpressionLvl3(AAddExpressionLvl3 node)
    {
        defaultIn(node);
    }

    public void outAAddExpressionLvl3(AAddExpressionLvl3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpressionLvl3(AAddExpressionLvl3 node)
    {
        inAAddExpressionLvl3(node);
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        outAAddExpressionLvl3(node);
    }

    public void inASubExpressionLvl3(ASubExpressionLvl3 node)
    {
        defaultIn(node);
    }

    public void outASubExpressionLvl3(ASubExpressionLvl3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpressionLvl3(ASubExpressionLvl3 node)
    {
        inASubExpressionLvl3(node);
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        outASubExpressionLvl3(node);
    }

    public void inAPassExpressionLvl3(APassExpressionLvl3 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl3(APassExpressionLvl3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl3(APassExpressionLvl3 node)
    {
        inAPassExpressionLvl3(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        outAPassExpressionLvl3(node);
    }

    public void inAMulExpressionLvl2(AMulExpressionLvl2 node)
    {
        defaultIn(node);
    }

    public void outAMulExpressionLvl2(AMulExpressionLvl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExpressionLvl2(AMulExpressionLvl2 node)
    {
        inAMulExpressionLvl2(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        outAMulExpressionLvl2(node);
    }

    public void inADivExpressionLvl2(ADivExpressionLvl2 node)
    {
        defaultIn(node);
    }

    public void outADivExpressionLvl2(ADivExpressionLvl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpressionLvl2(ADivExpressionLvl2 node)
    {
        inADivExpressionLvl2(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        if(node.getDivides() != null)
        {
            node.getDivides().apply(this);
        }
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        outADivExpressionLvl2(node);
    }

    public void inAPassExpressionLvl2(APassExpressionLvl2 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl2(APassExpressionLvl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl2(APassExpressionLvl2 node)
    {
        inAPassExpressionLvl2(node);
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        outAPassExpressionLvl2(node);
    }

    public void inANotExpressionLvl1(ANotExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outANotExpressionLvl1(ANotExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpressionLvl1(ANotExpressionLvl1 node)
    {
        inANotExpressionLvl1(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        outANotExpressionLvl1(node);
    }

    public void inANegExpressionLvl1(ANegExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outANegExpressionLvl1(ANegExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegExpressionLvl1(ANegExpressionLvl1 node)
    {
        inANegExpressionLvl1(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        outANegExpressionLvl1(node);
    }

    public void inAPassExpressionLvl1(APassExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outAPassExpressionLvl1(APassExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassExpressionLvl1(APassExpressionLvl1 node)
    {
        inAPassExpressionLvl1(node);
        if(node.getExpressionLvl0() != null)
        {
            node.getExpressionLvl0().apply(this);
        }
        outAPassExpressionLvl1(node);
    }

    public void inAArrayExpressionLvl0(AArrayExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outAArrayExpressionLvl0(AArrayExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpressionLvl0(AArrayExpressionLvl0 node)
    {
        inAArrayExpressionLvl0(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        outAArrayExpressionLvl0(node);
    }

    public void inAMethodCalExpressionLvl0(AMethodCalExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outAMethodCalExpressionLvl0(AMethodCalExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCalExpressionLvl0(AMethodCalExpressionLvl0 node)
    {
        inAMethodCalExpressionLvl0(node);
        if(node.getMethodCallExpr() != null)
        {
            node.getMethodCallExpr().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getValuesList() != null)
        {
            node.getValuesList().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        outAMethodCalExpressionLvl0(node);
    }

    public void inAIntExpressionLvl0(AIntExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outAIntExpressionLvl0(AIntExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExpressionLvl0(AIntExpressionLvl0 node)
    {
        inAIntExpressionLvl0(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntExpressionLvl0(node);
    }

    public void inAStringExpressionLvl0(AStringExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outAStringExpressionLvl0(AStringExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpressionLvl0(AStringExpressionLvl0 node)
    {
        inAStringExpressionLvl0(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringExpressionLvl0(node);
    }

    public void inATrueExpressionLvl0(ATrueExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outATrueExpressionLvl0(ATrueExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpressionLvl0(ATrueExpressionLvl0 node)
    {
        inATrueExpressionLvl0(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueExpressionLvl0(node);
    }

    public void inAFalseExpressionLvl0(AFalseExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outAFalseExpressionLvl0(AFalseExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpressionLvl0(AFalseExpressionLvl0 node)
    {
        inAFalseExpressionLvl0(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseExpressionLvl0(node);
    }

    public void inAIdentifierExpressionLvl0(AIdentifierExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpressionLvl0(AIdentifierExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExpressionLvl0(AIdentifierExpressionLvl0 node)
    {
        inAIdentifierExpressionLvl0(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExpressionLvl0(node);
    }

    public void inAThisExpressionLvl0(AThisExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outAThisExpressionLvl0(AThisExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisExpressionLvl0(AThisExpressionLvl0 node)
    {
        inAThisExpressionLvl0(node);
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        outAThisExpressionLvl0(node);
    }

    public void inANewObjExpressionLvl0(ANewObjExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outANewObjExpressionLvl0(ANewObjExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewObjExpressionLvl0(ANewObjExpressionLvl0 node)
    {
        inANewObjExpressionLvl0(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getValuesList() != null)
        {
            node.getValuesList().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        outANewObjExpressionLvl0(node);
    }

    public void inANewArrExpressionLvl0(ANewArrExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outANewArrExpressionLvl0(ANewArrExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewArrExpressionLvl0(ANewArrExpressionLvl0 node)
    {
        inANewArrExpressionLvl0(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getLeftBracket() != null)
        {
            node.getLeftBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightBracket() != null)
        {
            node.getRightBracket().apply(this);
        }
        outANewArrExpressionLvl0(node);
    }

    public void inAParenExpressionLvl0(AParenExpressionLvl0 node)
    {
        defaultIn(node);
    }

    public void outAParenExpressionLvl0(AParenExpressionLvl0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenExpressionLvl0(AParenExpressionLvl0 node)
    {
        inAParenExpressionLvl0(node);
        if(node.getLeftParen() != null)
        {
            node.getLeftParen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRightParen() != null)
        {
            node.getRightParen().apply(this);
        }
        outAParenExpressionLvl0(node);
    }

    public void inAMethodCallExpr(AMethodCallExpr node)
    {
        defaultIn(node);
    }

    public void outAMethodCallExpr(AMethodCallExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallExpr(AMethodCallExpr node)
    {
        inAMethodCallExpr(node);
        if(node.getExpressionLvl0() != null)
        {
            node.getExpressionLvl0().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMethodCallExpr(node);
    }
}
