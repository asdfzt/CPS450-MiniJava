/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AMethodCalExpressionLvl0 extends PExpressionLvl0
{
    private PMethodCallExpr _methodCallExpr_;
    private TIdentifier _identifier_;
    private TLeftParen _leftParen_;
    private PValuesList _valuesList_;
    private TRightParen _rightParen_;

    public AMethodCalExpressionLvl0()
    {
        // Constructor
    }

    public AMethodCalExpressionLvl0(
        @SuppressWarnings("hiding") PMethodCallExpr _methodCallExpr_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLeftParen _leftParen_,
        @SuppressWarnings("hiding") PValuesList _valuesList_,
        @SuppressWarnings("hiding") TRightParen _rightParen_)
    {
        // Constructor
        setMethodCallExpr(_methodCallExpr_);

        setIdentifier(_identifier_);

        setLeftParen(_leftParen_);

        setValuesList(_valuesList_);

        setRightParen(_rightParen_);

    }

    @Override
    public Object clone()
    {
        return new AMethodCalExpressionLvl0(
            cloneNode(this._methodCallExpr_),
            cloneNode(this._identifier_),
            cloneNode(this._leftParen_),
            cloneNode(this._valuesList_),
            cloneNode(this._rightParen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodCalExpressionLvl0(this);
    }

    public PMethodCallExpr getMethodCallExpr()
    {
        return this._methodCallExpr_;
    }

    public void setMethodCallExpr(PMethodCallExpr node)
    {
        if(this._methodCallExpr_ != null)
        {
            this._methodCallExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodCallExpr_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLeftParen getLeftParen()
    {
        return this._leftParen_;
    }

    public void setLeftParen(TLeftParen node)
    {
        if(this._leftParen_ != null)
        {
            this._leftParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParen_ = node;
    }

    public PValuesList getValuesList()
    {
        return this._valuesList_;
    }

    public void setValuesList(PValuesList node)
    {
        if(this._valuesList_ != null)
        {
            this._valuesList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._valuesList_ = node;
    }

    public TRightParen getRightParen()
    {
        return this._rightParen_;
    }

    public void setRightParen(TRightParen node)
    {
        if(this._rightParen_ != null)
        {
            this._rightParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._methodCallExpr_)
            + toString(this._identifier_)
            + toString(this._leftParen_)
            + toString(this._valuesList_)
            + toString(this._rightParen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._methodCallExpr_ == child)
        {
            this._methodCallExpr_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._leftParen_ == child)
        {
            this._leftParen_ = null;
            return;
        }

        if(this._valuesList_ == child)
        {
            this._valuesList_ = null;
            return;
        }

        if(this._rightParen_ == child)
        {
            this._rightParen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._methodCallExpr_ == oldChild)
        {
            setMethodCallExpr((PMethodCallExpr) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._leftParen_ == oldChild)
        {
            setLeftParen((TLeftParen) newChild);
            return;
        }

        if(this._valuesList_ == oldChild)
        {
            setValuesList((PValuesList) newChild);
            return;
        }

        if(this._rightParen_ == oldChild)
        {
            setRightParen((TRightParen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
