/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AClassDefinition extends PClassDefinition
{
    private TClasskey _classkey_;
    private TIdentifier _identifier_;
    private PExtendsProduction _extendsProduction_;
    private TLeftCurly _leftCurly_;
    private final LinkedList<PVariableDefinition> _variableDefinition_ = new LinkedList<PVariableDefinition>();
    private final LinkedList<PMethodDefinition> _methodDefinition_ = new LinkedList<PMethodDefinition>();
    private TRightCurly _rightCurly_;

    public AClassDefinition()
    {
        // Constructor
    }

    public AClassDefinition(
        @SuppressWarnings("hiding") TClasskey _classkey_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PExtendsProduction _extendsProduction_,
        @SuppressWarnings("hiding") TLeftCurly _leftCurly_,
        @SuppressWarnings("hiding") List<?> _variableDefinition_,
        @SuppressWarnings("hiding") List<?> _methodDefinition_,
        @SuppressWarnings("hiding") TRightCurly _rightCurly_)
    {
        // Constructor
        setClasskey(_classkey_);

        setIdentifier(_identifier_);

        setExtendsProduction(_extendsProduction_);

        setLeftCurly(_leftCurly_);

        setVariableDefinition(_variableDefinition_);

        setMethodDefinition(_methodDefinition_);

        setRightCurly(_rightCurly_);

    }

    @Override
    public Object clone()
    {
        return new AClassDefinition(
            cloneNode(this._classkey_),
            cloneNode(this._identifier_),
            cloneNode(this._extendsProduction_),
            cloneNode(this._leftCurly_),
            cloneList(this._variableDefinition_),
            cloneList(this._methodDefinition_),
            cloneNode(this._rightCurly_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassDefinition(this);
    }

    public TClasskey getClasskey()
    {
        return this._classkey_;
    }

    public void setClasskey(TClasskey node)
    {
        if(this._classkey_ != null)
        {
            this._classkey_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classkey_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PExtendsProduction getExtendsProduction()
    {
        return this._extendsProduction_;
    }

    public void setExtendsProduction(PExtendsProduction node)
    {
        if(this._extendsProduction_ != null)
        {
            this._extendsProduction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._extendsProduction_ = node;
    }

    public TLeftCurly getLeftCurly()
    {
        return this._leftCurly_;
    }

    public void setLeftCurly(TLeftCurly node)
    {
        if(this._leftCurly_ != null)
        {
            this._leftCurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftCurly_ = node;
    }

    public LinkedList<PVariableDefinition> getVariableDefinition()
    {
        return this._variableDefinition_;
    }

    public void setVariableDefinition(List<?> list)
    {
        for(PVariableDefinition e : this._variableDefinition_)
        {
            e.parent(null);
        }
        this._variableDefinition_.clear();

        for(Object obj_e : list)
        {
            PVariableDefinition e = (PVariableDefinition) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variableDefinition_.add(e);
        }
    }

    public LinkedList<PMethodDefinition> getMethodDefinition()
    {
        return this._methodDefinition_;
    }

    public void setMethodDefinition(List<?> list)
    {
        for(PMethodDefinition e : this._methodDefinition_)
        {
            e.parent(null);
        }
        this._methodDefinition_.clear();

        for(Object obj_e : list)
        {
            PMethodDefinition e = (PMethodDefinition) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._methodDefinition_.add(e);
        }
    }

    public TRightCurly getRightCurly()
    {
        return this._rightCurly_;
    }

    public void setRightCurly(TRightCurly node)
    {
        if(this._rightCurly_ != null)
        {
            this._rightCurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightCurly_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classkey_)
            + toString(this._identifier_)
            + toString(this._extendsProduction_)
            + toString(this._leftCurly_)
            + toString(this._variableDefinition_)
            + toString(this._methodDefinition_)
            + toString(this._rightCurly_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classkey_ == child)
        {
            this._classkey_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._extendsProduction_ == child)
        {
            this._extendsProduction_ = null;
            return;
        }

        if(this._leftCurly_ == child)
        {
            this._leftCurly_ = null;
            return;
        }

        if(this._variableDefinition_.remove(child))
        {
            return;
        }

        if(this._methodDefinition_.remove(child))
        {
            return;
        }

        if(this._rightCurly_ == child)
        {
            this._rightCurly_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classkey_ == oldChild)
        {
            setClasskey((TClasskey) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._extendsProduction_ == oldChild)
        {
            setExtendsProduction((PExtendsProduction) newChild);
            return;
        }

        if(this._leftCurly_ == oldChild)
        {
            setLeftCurly((TLeftCurly) newChild);
            return;
        }

        for(ListIterator<PVariableDefinition> i = this._variableDefinition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVariableDefinition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethodDefinition> i = this._methodDefinition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethodDefinition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rightCurly_ == oldChild)
        {
            setRightCurly((TRightCurly) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
