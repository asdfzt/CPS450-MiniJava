/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AMethodDefinition extends PMethodDefinition
{
    private TPublic _public_;
    private PTypeProduction _typeProduction_;
    private TIdentifier _identifier_;
    private TLeftParen _leftParen_;
    private PArgumentList _argumentList_;
    private TRightParen _rightParen_;
    private TLeftCurly _leftCurly_;
    private final LinkedList<PVariableDefinition> _variableDefinition_ = new LinkedList<PVariableDefinition>();
    private final LinkedList<PStatement> _statement_ = new LinkedList<PStatement>();
    private TRightCurly _rightCurly_;

    public AMethodDefinition()
    {
        // Constructor
    }

    public AMethodDefinition(
        @SuppressWarnings("hiding") TPublic _public_,
        @SuppressWarnings("hiding") PTypeProduction _typeProduction_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TLeftParen _leftParen_,
        @SuppressWarnings("hiding") PArgumentList _argumentList_,
        @SuppressWarnings("hiding") TRightParen _rightParen_,
        @SuppressWarnings("hiding") TLeftCurly _leftCurly_,
        @SuppressWarnings("hiding") List<?> _variableDefinition_,
        @SuppressWarnings("hiding") List<?> _statement_,
        @SuppressWarnings("hiding") TRightCurly _rightCurly_)
    {
        // Constructor
        setPublic(_public_);

        setTypeProduction(_typeProduction_);

        setIdentifier(_identifier_);

        setLeftParen(_leftParen_);

        setArgumentList(_argumentList_);

        setRightParen(_rightParen_);

        setLeftCurly(_leftCurly_);

        setVariableDefinition(_variableDefinition_);

        setStatement(_statement_);

        setRightCurly(_rightCurly_);

    }

    @Override
    public Object clone()
    {
        return new AMethodDefinition(
            cloneNode(this._public_),
            cloneNode(this._typeProduction_),
            cloneNode(this._identifier_),
            cloneNode(this._leftParen_),
            cloneNode(this._argumentList_),
            cloneNode(this._rightParen_),
            cloneNode(this._leftCurly_),
            cloneList(this._variableDefinition_),
            cloneList(this._statement_),
            cloneNode(this._rightCurly_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodDefinition(this);
    }

    public TPublic getPublic()
    {
        return this._public_;
    }

    public void setPublic(TPublic node)
    {
        if(this._public_ != null)
        {
            this._public_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._public_ = node;
    }

    public PTypeProduction getTypeProduction()
    {
        return this._typeProduction_;
    }

    public void setTypeProduction(PTypeProduction node)
    {
        if(this._typeProduction_ != null)
        {
            this._typeProduction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeProduction_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TLeftParen getLeftParen()
    {
        return this._leftParen_;
    }

    public void setLeftParen(TLeftParen node)
    {
        if(this._leftParen_ != null)
        {
            this._leftParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftParen_ = node;
    }

    public PArgumentList getArgumentList()
    {
        return this._argumentList_;
    }

    public void setArgumentList(PArgumentList node)
    {
        if(this._argumentList_ != null)
        {
            this._argumentList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argumentList_ = node;
    }

    public TRightParen getRightParen()
    {
        return this._rightParen_;
    }

    public void setRightParen(TRightParen node)
    {
        if(this._rightParen_ != null)
        {
            this._rightParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightParen_ = node;
    }

    public TLeftCurly getLeftCurly()
    {
        return this._leftCurly_;
    }

    public void setLeftCurly(TLeftCurly node)
    {
        if(this._leftCurly_ != null)
        {
            this._leftCurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftCurly_ = node;
    }

    public LinkedList<PVariableDefinition> getVariableDefinition()
    {
        return this._variableDefinition_;
    }

    public void setVariableDefinition(List<?> list)
    {
        for(PVariableDefinition e : this._variableDefinition_)
        {
            e.parent(null);
        }
        this._variableDefinition_.clear();

        for(Object obj_e : list)
        {
            PVariableDefinition e = (PVariableDefinition) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variableDefinition_.add(e);
        }
    }

    public LinkedList<PStatement> getStatement()
    {
        return this._statement_;
    }

    public void setStatement(List<?> list)
    {
        for(PStatement e : this._statement_)
        {
            e.parent(null);
        }
        this._statement_.clear();

        for(Object obj_e : list)
        {
            PStatement e = (PStatement) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._statement_.add(e);
        }
    }

    public TRightCurly getRightCurly()
    {
        return this._rightCurly_;
    }

    public void setRightCurly(TRightCurly node)
    {
        if(this._rightCurly_ != null)
        {
            this._rightCurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightCurly_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._public_)
            + toString(this._typeProduction_)
            + toString(this._identifier_)
            + toString(this._leftParen_)
            + toString(this._argumentList_)
            + toString(this._rightParen_)
            + toString(this._leftCurly_)
            + toString(this._variableDefinition_)
            + toString(this._statement_)
            + toString(this._rightCurly_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._public_ == child)
        {
            this._public_ = null;
            return;
        }

        if(this._typeProduction_ == child)
        {
            this._typeProduction_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._leftParen_ == child)
        {
            this._leftParen_ = null;
            return;
        }

        if(this._argumentList_ == child)
        {
            this._argumentList_ = null;
            return;
        }

        if(this._rightParen_ == child)
        {
            this._rightParen_ = null;
            return;
        }

        if(this._leftCurly_ == child)
        {
            this._leftCurly_ = null;
            return;
        }

        if(this._variableDefinition_.remove(child))
        {
            return;
        }

        if(this._statement_.remove(child))
        {
            return;
        }

        if(this._rightCurly_ == child)
        {
            this._rightCurly_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._public_ == oldChild)
        {
            setPublic((TPublic) newChild);
            return;
        }

        if(this._typeProduction_ == oldChild)
        {
            setTypeProduction((PTypeProduction) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._leftParen_ == oldChild)
        {
            setLeftParen((TLeftParen) newChild);
            return;
        }

        if(this._argumentList_ == oldChild)
        {
            setArgumentList((PArgumentList) newChild);
            return;
        }

        if(this._rightParen_ == oldChild)
        {
            setRightParen((TRightParen) newChild);
            return;
        }

        if(this._leftCurly_ == oldChild)
        {
            setLeftCurly((TLeftCurly) newChild);
            return;
        }

        for(ListIterator<PVariableDefinition> i = this._variableDefinition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVariableDefinition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PStatement> i = this._statement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rightCurly_ == oldChild)
        {
            setRightCurly((TRightCurly) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
