/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AMulExpressionLvl2 extends PExpressionLvl2
{
    private PExpressionLvl2 _expressionLvl2_;
    private TMultiplication _multiplication_;
    private PExpressionLvl1 _expressionLvl1_;

    public AMulExpressionLvl2()
    {
        // Constructor
    }

    public AMulExpressionLvl2(
        @SuppressWarnings("hiding") PExpressionLvl2 _expressionLvl2_,
        @SuppressWarnings("hiding") TMultiplication _multiplication_,
        @SuppressWarnings("hiding") PExpressionLvl1 _expressionLvl1_)
    {
        // Constructor
        setExpressionLvl2(_expressionLvl2_);

        setMultiplication(_multiplication_);

        setExpressionLvl1(_expressionLvl1_);

    }

    @Override
    public Object clone()
    {
        return new AMulExpressionLvl2(
            cloneNode(this._expressionLvl2_),
            cloneNode(this._multiplication_),
            cloneNode(this._expressionLvl1_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMulExpressionLvl2(this);
    }

    public PExpressionLvl2 getExpressionLvl2()
    {
        return this._expressionLvl2_;
    }

    public void setExpressionLvl2(PExpressionLvl2 node)
    {
        if(this._expressionLvl2_ != null)
        {
            this._expressionLvl2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionLvl2_ = node;
    }

    public TMultiplication getMultiplication()
    {
        return this._multiplication_;
    }

    public void setMultiplication(TMultiplication node)
    {
        if(this._multiplication_ != null)
        {
            this._multiplication_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiplication_ = node;
    }

    public PExpressionLvl1 getExpressionLvl1()
    {
        return this._expressionLvl1_;
    }

    public void setExpressionLvl1(PExpressionLvl1 node)
    {
        if(this._expressionLvl1_ != null)
        {
            this._expressionLvl1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionLvl1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expressionLvl2_)
            + toString(this._multiplication_)
            + toString(this._expressionLvl1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expressionLvl2_ == child)
        {
            this._expressionLvl2_ = null;
            return;
        }

        if(this._multiplication_ == child)
        {
            this._multiplication_ = null;
            return;
        }

        if(this._expressionLvl1_ == child)
        {
            this._expressionLvl1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expressionLvl2_ == oldChild)
        {
            setExpressionLvl2((PExpressionLvl2) newChild);
            return;
        }

        if(this._multiplication_ == oldChild)
        {
            setMultiplication((TMultiplication) newChild);
            return;
        }

        if(this._expressionLvl1_ == oldChild)
        {
            setExpressionLvl1((PExpressionLvl1) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
