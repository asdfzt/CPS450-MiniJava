/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import java.util.*;
import com.bju.cps450.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        {
            List<PClassDefinition> copy = new ArrayList<PClassDefinition>(node.getClassDefinition());
            Collections.reverse(copy);
            for(PClassDefinition e : copy)
            {
                e.apply(this);
            }
        }
        outAStart(node);
    }

    public void inAClassDefinition(AClassDefinition node)
    {
        defaultIn(node);
    }

    public void outAClassDefinition(AClassDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDefinition(AClassDefinition node)
    {
        inAClassDefinition(node);
        {
            List<PMethod> copy = new ArrayList<PMethod>(node.getMethod());
            Collections.reverse(copy);
            for(PMethod e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PVariable> copy = new ArrayList<PVariable>(node.getVariable());
            Collections.reverse(copy);
            for(PVariable e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExtendsClass() != null)
        {
            node.getExtendsClass().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAClassDefinition(node);
    }

    public void inAExtendsClass(AExtendsClass node)
    {
        defaultIn(node);
    }

    public void outAExtendsClass(AExtendsClass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExtendsClass(AExtendsClass node)
    {
        inAExtendsClass(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAExtendsClass(node);
    }

    public void inAVariable(AVariable node)
    {
        defaultIn(node);
    }

    public void outAVariable(AVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariable(AVariable node)
    {
        inAVariable(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAVariable(node);
    }

    public void inAMethod(AMethod node)
    {
        defaultIn(node);
    }

    public void outAMethod(AMethod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethod(AMethod node)
    {
        inAMethod(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PVariable> copy = new ArrayList<PVariable>(node.getVariable());
            Collections.reverse(copy);
            for(PVariable e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PArgument> copy = new ArrayList<PArgument>(node.getArgument());
            Collections.reverse(copy);
            for(PArgument e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAMethod(node);
    }

    public void inAIntArrayType(AIntArrayType node)
    {
        defaultIn(node);
    }

    public void outAIntArrayType(AIntArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntArrayType(AIntArrayType node)
    {
        inAIntArrayType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntArrayType(node);
    }

    public void inAStringArrayType(AStringArrayType node)
    {
        defaultIn(node);
    }

    public void outAStringArrayType(AStringArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringArrayType(AStringArrayType node)
    {
        inAStringArrayType(node);
        if(node.getStringClass() != null)
        {
            node.getStringClass().apply(this);
        }
        outAStringArrayType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getStringClass() != null)
        {
            node.getStringClass().apply(this);
        }
        outAStringType(node);
    }

    public void inAVoidType(AVoidType node)
    {
        defaultIn(node);
    }

    public void outAVoidType(AVoidType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidType(AVoidType node)
    {
        inAVoidType(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidType(node);
    }

    public void inACustomType(ACustomType node)
    {
        defaultIn(node);
    }

    public void outACustomType(ACustomType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACustomType(ACustomType node)
    {
        inACustomType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outACustomType(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAArgument(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getFalse());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getTrue());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inAArrayAssignmentStatement(AArrayAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAArrayAssignmentStatement(AArrayAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayAssignmentStatement(AArrayAssignmentStatement node)
    {
        inAArrayAssignmentStatement(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getPosition() != null)
        {
            node.getPosition().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArrayAssignmentStatement(node);
    }

    public void inAMethodCallStatement(AMethodCallStatement node)
    {
        defaultIn(node);
    }

    public void outAMethodCallStatement(AMethodCallStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallStatement(AMethodCallStatement node)
    {
        inAMethodCallStatement(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpression());
            Collections.reverse(copy);
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TIdentifier> copy = new ArrayList<TIdentifier>(node.getIdentifier());
            Collections.reverse(copy);
            for(TIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAMethodCallStatement(node);
    }

    public void inAOrExpression(AOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrExpression(AOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpression(AOrExpression node)
    {
        inAOrExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAOrExpression(node);
    }

    public void inAAndExpression(AAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndExpression(AAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpression(AAndExpression node)
    {
        inAAndExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAAndExpression(node);
    }

    public void inAGreaterThanExpression(AGreaterThanExpression node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanExpression(AGreaterThanExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanExpression(AGreaterThanExpression node)
    {
        inAGreaterThanExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAGreaterThanExpression(node);
    }

    public void inALessThanExpression(ALessThanExpression node)
    {
        defaultIn(node);
    }

    public void outALessThanExpression(ALessThanExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanExpression(ALessThanExpression node)
    {
        inALessThanExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outALessThanExpression(node);
    }

    public void inAEqualsExpression(AEqualsExpression node)
    {
        defaultIn(node);
    }

    public void outAEqualsExpression(AEqualsExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsExpression(AEqualsExpression node)
    {
        inAEqualsExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAEqualsExpression(node);
    }

    public void inAAdditionExpression(AAdditionExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionExpression(AAdditionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionExpression(AAdditionExpression node)
    {
        inAAdditionExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAAdditionExpression(node);
    }

    public void inASubtractionExpression(ASubtractionExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractionExpression(ASubtractionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        inASubtractionExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outASubtractionExpression(node);
    }

    public void inAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        inAMultiplicationExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outAMultiplicationExpression(node);
    }

    public void inADivisionExpression(ADivisionExpression node)
    {
        defaultIn(node);
    }

    public void outADivisionExpression(ADivisionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisionExpression(ADivisionExpression node)
    {
        inADivisionExpression(node);
        if(node.getRhs() != null)
        {
            node.getRhs().apply(this);
        }
        if(node.getLhs() != null)
        {
            node.getLhs().apply(this);
        }
        outADivisionExpression(node);
    }

    public void inANotExpression(ANotExpression node)
    {
        defaultIn(node);
    }

    public void outANotExpression(ANotExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpression(ANotExpression node)
    {
        inANotExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANotExpression(node);
    }

    public void inANegationExpression(ANegationExpression node)
    {
        defaultIn(node);
    }

    public void outANegationExpression(ANegationExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegationExpression(ANegationExpression node)
    {
        inANegationExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANegationExpression(node);
    }

    public void inAArrayExpression(AArrayExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayExpression(AArrayExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpression(AArrayExpression node)
    {
        inAArrayExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArrayExpression(node);
    }

    public void inAMethodCallExpression(AMethodCallExpression node)
    {
        defaultIn(node);
    }

    public void outAMethodCallExpression(AMethodCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallExpression(AMethodCallExpression node)
    {
        inAMethodCallExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpression());
            Collections.reverse(copy);
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAMethodCallExpression(node);
    }

    public void inAIntExpression(AIntExpression node)
    {
        defaultIn(node);
    }

    public void outAIntExpression(AIntExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntExpression(AIntExpression node)
    {
        inAIntExpression(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntExpression(node);
    }

    public void inAStringExpression(AStringExpression node)
    {
        defaultIn(node);
    }

    public void outAStringExpression(AStringExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpression(AStringExpression node)
    {
        inAStringExpression(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringExpression(node);
    }

    public void inATrueExpression(ATrueExpression node)
    {
        defaultIn(node);
    }

    public void outATrueExpression(ATrueExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpression(ATrueExpression node)
    {
        inATrueExpression(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueExpression(node);
    }

    public void inAFalseExpression(AFalseExpression node)
    {
        defaultIn(node);
    }

    public void outAFalseExpression(AFalseExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpression(AFalseExpression node)
    {
        inAFalseExpression(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inAThisExpression(AThisExpression node)
    {
        defaultIn(node);
    }

    public void outAThisExpression(AThisExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisExpression(AThisExpression node)
    {
        inAThisExpression(node);
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        outAThisExpression(node);
    }

    public void inANewObjectExpression(ANewObjectExpression node)
    {
        defaultIn(node);
    }

    public void outANewObjectExpression(ANewObjectExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewObjectExpression(ANewObjectExpression node)
    {
        inANewObjectExpression(node);
        {
            List<PExpression> copy = new ArrayList<PExpression>(node.getExpression());
            Collections.reverse(copy);
            for(PExpression e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outANewObjectExpression(node);
    }

    public void inANewIntArrayExpression(ANewIntArrayExpression node)
    {
        defaultIn(node);
    }

    public void outANewIntArrayExpression(ANewIntArrayExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewIntArrayExpression(ANewIntArrayExpression node)
    {
        inANewIntArrayExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANewIntArrayExpression(node);
    }

    public void inANewStringArrayExpression(ANewStringArrayExpression node)
    {
        defaultIn(node);
    }

    public void outANewStringArrayExpression(ANewStringArrayExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewStringArrayExpression(ANewStringArrayExpression node)
    {
        inANewStringArrayExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outANewStringArrayExpression(node);
    }
}
